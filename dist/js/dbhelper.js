class DBHelper{static get DATABASE_URL(){return"http://localhost:1337"}static get errorMsg(){return"Oh no! Could not refresh content :("}static fetchData(e,t){DBHelper.openDatabase().then(function(r){if(!r)return;r.transaction(e).objectStore(e).getAll().then(function(r){fetch(`${DBHelper.DATABASE_URL}/${e}/`).then(e=>e.json()).then(n=>{JSON.stringify(n)!==JSON.stringify(r)?(DBHelper._updateDB(e,n),t(null,n)):t(null,r)}).catch(e=>t(DBHelper.errorMsg,r))})})}static fetchDataById(e,t,r){DBHelper.openDatabase().then(function(n){if(!n)return;n.transaction(e).objectStore(e).get(t).then(function(n){fetch(`${DBHelper.DATABASE_URL}/${e}/${t}`).then(e=>e.json()).then(t=>{JSON.stringify(t)!==JSON.stringify(n)?(DBHelper._updateDB(e,t),r(null,t)):r(null,n)}).catch(e=>r(DBHelper.errorMsg,n))})})}static fetchReviewsByRestaurantId(e,t){DBHelper.openDatabase().then(function(r){if(!r)return;r.transaction("reviews").objectStore("reviews").index("by-restaurant").getAll(e).then(function(r){fetch(`${DBHelper.DATABASE_URL}/reviews/?restaurant_id=${e}`).then(e=>e.json()).then(e=>{JSON.stringify(e)!==JSON.stringify(r)?(DBHelper._updateDB("reviews",e),t(null,e)):t(null,r)}).catch(e=>t(DBHelper.errorMsg,r))})})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchData("restaurants",(r,n)=>{if(r&&0===n.length)t(r,null);else{const a=n.filter(t=>t.cuisine_type==e);t(r,a)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchData("restaurants",(r,n)=>{if(r&&0===n.length)t(r,null);else{const a=n.filter(t=>t.neighborhood==e);t(r,a)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchData("restaurants",(n,a)=>{if(n&&0===a.length)r(n,null);else{let i=a;"all"!=e&&(i=i.filter(t=>t.cuisine_type==e)),"all"!=t&&(i=i.filter(e=>e.neighborhood==t)),r(n,i)}})}static fetchNeighborhoods(e){DBHelper.fetchData("restaurants",(t,r)=>{if(t&&0===r.length)e(t,null);else{const n=r.map((e,t)=>r[t].neighborhood),a=n.filter((e,t)=>n.indexOf(e)==t);e(t,a)}})}static fetchCuisines(e){DBHelper.fetchData("restaurants",(t,r)=>{if(t&&0===r.length)e(t,null);else{const n=r.map((e,t)=>r[t].cuisine_type),a=n.filter((e,t)=>n.indexOf(e)==t);e(t,a)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static getPhotoDescription(e){return`Photo of ${e.name} in ${e.neighborhood}`}static imageUrlForRestaurant(e,t=!1){return e&&e.photograph?t?`imgs/${e.photograph}-low.jpg`:`imgs/${e.photograph}.jpg`:"imgs/no-pictures.svg"}static imageSRCSetUrlsForRestaurant(e,t){let r=[];return e&&e.photograph&&t.forEach(t=>{r.push(`imgs/${e.photograph}-${t}.jpg ${t}`)}),r.join(", ")}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static openDatabase(){return navigator.serviceWorker?idb.open("restaurantsData",1,function(e){["restaurants","reviews","newR","newIsFavourite"].forEach(t=>{let r=e.createObjectStore(t,{autoIncrement:!0,keyPath:"id"});r.createIndex("by-date","createdAt"),"reviews"!==t&&"newIsFavourite"!==t||r.createIndex("by-restaurant","restaurant_id")})}):Promise.resolve()}static _updateDB(e,t,r){return DBHelper.openDatabase().then(function(r){if(!r)return;var n=r.transaction(e,"readwrite").objectStore(e);[].concat(t).forEach(e=>{n.put(e)}),n.index("by-date").openCursor(null,"prev").then(function(e){return e.advance(30)}).then(function e(t){if(t)return t.delete(),t.continue().then(e)})})}static registerServiceWorker(){var e;navigator.serviceWorker&&(navigator.serviceWorker.register("sw.js").then(function(e){navigator.serviceWorker.controller&&(e.waiting?DBHelper._updateReady(e.waiting):e.installing?DBHelper._trackInstalling(e.installing):e.addEventListener("updatefound",function(){DBHelper._trackInstalling(e.installing)}))}),navigator.serviceWorker.addEventListener("controllerchange",function(){e||(window.location.reload(),e=!0)}))}static _trackInstalling(e){e.addEventListener("statechange",function(){"installed"==e.state&&DBHelper._updateReady(e)})}static _updateReady(e){this._toastsView=new Toast,this._toastsView.create("New version available",{buttons:["refresh","dismiss"]}).answer.then(function(t){"refresh"==t&&e.postMessage({action:"skipWaiting"})})}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
