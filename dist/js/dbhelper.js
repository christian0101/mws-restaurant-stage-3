class DBHelper{static get DATABASE_URL(){return"http://localhost:1337"}static get errorMsg(){return"Oh no! Could not refresh content :("}static fetchData(e,t){DBHelper.openDatabase().then(function(r){if(!r)return;r.transaction(e).objectStore(e).getAll().then(function(r){fetch(`${DBHelper.DATABASE_URL}/${e}/`).then(e=>e.json()).then(n=>{JSON.stringify(n)!==JSON.stringify(r)?(DBHelper._updateDB(e,n),t(null,n)):t(null,r)}).catch(e=>t(DBHelper.errorMsg,r))})})}static fetchDataById(e,t,r){DBHelper.openDatabase().then(function(n){if(!n)return;let a=n.transaction(e).objectStore(e);const i=parseInt(t);a.get(i).then(function(t){fetch(`${DBHelper.DATABASE_URL}/${e}/${i}`).then(e=>e.json()).then(n=>{JSON.stringify(n)!==JSON.stringify(t)?(DBHelper._updateDB(e,n),r(null,n)):r(null,t)}).catch(e=>r(DBHelper.errorMsg,t))})})}static fetchReviewsByRestaurantId(e,t){DBHelper.openDatabase().then(function(r){if(!r)return;let n=r.transaction("reviews").objectStore("reviews");const a=parseInt(e);n.index("by-restaurant").getAll(a).then(function(e){fetch(`${DBHelper.DATABASE_URL}/reviews/?restaurant_id=${a}`).then(e=>e.json()).then(r=>{JSON.stringify(r)!==JSON.stringify(e)?(DBHelper._updateDB("reviews",r),t(null,r)):t(null,e)}).catch(r=>t(DBHelper.errorMsg,e))})})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchData("restaurants",(r,n)=>{if(r&&0===n.length)t(r,null);else{const a=n.filter(t=>t.cuisine_type==e);t(r,a)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchData("restaurants",(r,n)=>{if(r&&0===n.length)t(r,null);else{const a=n.filter(t=>t.neighborhood==e);t(r,a)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchData("restaurants",(n,a)=>{if(n&&0===a.length)r(n,null);else{let i=a;"all"!=e&&(i=i.filter(t=>t.cuisine_type==e)),"all"!=t&&(i=i.filter(e=>e.neighborhood==t)),r(n,i)}})}static fetchNeighborhoods(e){DBHelper.fetchData("restaurants",(t,r)=>{if(t&&0===r.length)e(t,null);else{const n=r.map((e,t)=>r[t].neighborhood),a=n.filter((e,t)=>n.indexOf(e)==t);e(t,a)}})}static fetchCuisines(e){DBHelper.fetchData("restaurants",(t,r)=>{if(t&&0===r.length)e(t,null);else{const n=r.map((e,t)=>r[t].cuisine_type),a=n.filter((e,t)=>n.indexOf(e)==t);e(t,a)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static getPhotoDescription(e){return`Photo of ${e.name} in ${e.neighborhood}`}static imageUrlForRestaurant(e,t=!1){return e&&e.photograph?t?`imgs/${e.photograph}-low.jpg`:`imgs/${e.photograph}.jpg`:"imgs/no-pictures.svg"}static imageSRCSetUrlsForRestaurant(e,t){let r=[];return e&&e.photograph&&t.forEach(t=>{r.push(`imgs/${e.photograph}-${t}.jpg ${t}`)}),r.join(", ")}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static openDatabase(){return navigator.serviceWorker?idb.open("restaurnatsData",1,function(e){["restaurants","reviews","new"].forEach(t=>{let r=e.createObjectStore(t,{autoIncrement:!0,keyPath:"id"});r.createIndex("by-date","createdAt"),"reviews"===t&&r.createIndex("by-restaurant","restaurant_id")})}):Promise.resolve()}static _updateDB(e,t){DBHelper.openDatabase().then(function(r){if(!r)return;var n=r.transaction(e,"readwrite").objectStore(e);[].concat(t).forEach(e=>{n.put(e)}),n.index("by-date").openCursor(null,"prev").then(function(e){return e.advance(30)}).then(function e(t){if(t)return t.delete(),t.continue().then(e)})})}static registerServiceWorker(){var e;navigator.serviceWorker&&(navigator.serviceWorker.register("sw.js").then(function(e){navigator.serviceWorker.controller&&(e.waiting?DBHelper._updateReady(e.waiting):e.installing?DBHelper._trackInstalling(e.installing):e.addEventListener("updatefound",function(){DBHelper._trackInstalling(e.installing)}))}),navigator.serviceWorker.addEventListener("controllerchange",function(){e||(window.location.reload(),e=!0)}))}static _trackInstalling(e){e.addEventListener("statechange",function(){"installed"==e.state&&DBHelper._updateReady(e)})}static _updateReady(e){this._toastsView=new Toast,this._toastsView.create("New version available",{buttons:["refresh","dismiss"]}).answer.then(function(t){"refresh"==t&&e.postMessage({action:"skipWaiting"})})}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRiaGVscGVyLmpzIl0sIm5hbWVzIjpbIkRCSGVscGVyIiwiREFUQUJBU0VfVVJMIiwiZXJyb3JNc2ciLCJbb2JqZWN0IE9iamVjdF0iLCJkYXRhTmFtZSIsImNhbGxiYWNrIiwib3BlbkRhdGFiYXNlIiwidGhlbiIsImRiIiwidHJhbnNhY3Rpb24iLCJvYmplY3RTdG9yZSIsImdldEFsbCIsImNvbnRlbnQiLCJmZXRjaCIsInJlc3BvbnNlIiwianNvbiIsImRhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwiX3VwZGF0ZURCIiwiY2F0Y2giLCJlIiwiaWQiLCJkYkRhdGEiLCJkYXRhSUQiLCJwYXJzZUludCIsImdldCIsInJlc3RhdXJhbnRJRCIsImluZGV4IiwiY3Vpc2luZSIsImZldGNoRGF0YSIsImVycm9yIiwicmVzdGF1cmFudHMiLCJsZW5ndGgiLCJyZXN1bHRzIiwiZmlsdGVyIiwiciIsImN1aXNpbmVfdHlwZSIsIm5laWdoYm9yaG9vZCIsIm5laWdoYm9yaG9vZHMiLCJtYXAiLCJ2IiwiaSIsInVuaXF1ZU5laWdoYm9yaG9vZHMiLCJpbmRleE9mIiwiY3Vpc2luZXMiLCJ1bmlxdWVDdWlzaW5lcyIsInJlc3RhdXJhbnQiLCJuYW1lIiwibG93IiwicGhvdG9ncmFwaCIsIm9wdHMiLCJpbWFnZXMiLCJmb3JFYWNoIiwicHJvcCIsInB1c2giLCJqb2luIiwiZ29vZ2xlIiwibWFwcyIsIk1hcmtlciIsInBvc2l0aW9uIiwibGF0bG5nIiwidGl0bGUiLCJ1cmwiLCJ1cmxGb3JSZXN0YXVyYW50IiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwiRFJPUCIsIm5hdmlnYXRvciIsInNlcnZpY2VXb3JrZXIiLCJpZGIiLCJvcGVuIiwidXBncmFkZURiIiwiaXRlbSIsInN0b3JlIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJhdXRvSW5jcmVtZW50Iiwia2V5UGF0aCIsImNyZWF0ZUluZGV4IiwiUHJvbWlzZSIsInJlc29sdmUiLCJjb25jYXQiLCJwdXQiLCJvcGVuQ3Vyc29yIiwiY3Vyc29yIiwiYWR2YW5jZSIsImRlbGV0ZVJlc3QiLCJkZWxldGUiLCJjb250aW51ZSIsInJlZnJlc2hpbmciLCJyZWdpc3RlciIsInJlZyIsImNvbnRyb2xsZXIiLCJ3YWl0aW5nIiwiX3VwZGF0ZVJlYWR5IiwiaW5zdGFsbGluZyIsIl90cmFja0luc3RhbGxpbmciLCJhZGRFdmVudExpc3RlbmVyIiwid2luZG93IiwibG9jYXRpb24iLCJyZWxvYWQiLCJ3b3JrZXIiLCJzdGF0ZSIsInRoaXMiLCJfdG9hc3RzVmlldyIsIlRvYXN0IiwiY3JlYXRlIiwiYnV0dG9ucyIsImFuc3dlciIsInBvc3RNZXNzYWdlIiwiYWN0aW9uIl0sIm1hcHBpbmdzIjoiQUFHQSxNQUFNQSxTQU1KQywwQkFFRSxNQUFPLHdCQUdUQyxzQkFDRSxNQUFPLHNDQVNUQyxpQkFBaUJDLEVBQVVDLEdBQ3pCTCxTQUFTTSxlQUFlQyxLQUFLLFNBQVNDLEdBQ3BDLElBQUtBLEVBQ0gsT0FHV0EsRUFBR0MsWUFBWUwsR0FBVU0sWUFBWU4sR0FFM0NPLFNBQVNKLEtBQUssU0FBU0ssR0FDNUJDLFNBQVNiLFNBQVNDLGdCQUFnQkcsTUFDakNHLEtBQUtPLEdBQVlBLEVBQVNDLFFBQzFCUixLQUFNUyxJQUVEQyxLQUFLQyxVQUFVRixLQUFVQyxLQUFLQyxVQUFVTixJQUMxQ1osU0FBU21CLFVBQVVmLEVBQVVZLEdBQzdCWCxFQUFTLEtBQU1XLElBRWZYLEVBQVMsS0FBTU8sS0FHbEJRLE1BQU1DLEdBQUtoQixFQUFTTCxTQUFTRSxTQUFVVSxRQVE5Q1QscUJBQXFCQyxFQUFVa0IsRUFBSWpCLEdBQ2pDTCxTQUFTTSxlQUFlQyxLQUFLLFNBQVNDLEdBQ3BDLElBQUtBLEVBQ0gsT0FHRixJQUFJZSxFQUFTZixFQUFHQyxZQUFZTCxHQUFVTSxZQUFZTixHQUNsRCxNQUFNb0IsRUFBU0MsU0FBU0gsR0FFeEJDLEVBQU9HLElBQUlGLEdBQVFqQixLQUFLLFNBQVNLLEdBQy9CQyxTQUFTYixTQUFTQyxnQkFBZ0JHLEtBQVlvQixLQUM3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QURBQSxFQUFPRyxTQUNBSCxFQUFPSSxXQUFXakYsS0FBSytFLE9BUW5DbkYsK0JBMkJFLElBQUlzRixFQTFCQ3JCLFVBQVVDLGdCQUlmRCxVQUFVQyxjQUFjcUIsU0FBUyxTQUFTbkYsS0FBSyxTQUFTb0YsR0FDakR2QixVQUFVQyxjQUFjdUIsYUFJekJELEVBQUlFLFFBQ043RixTQUFTOEYsYUFBYUgsRUFBSUUsU0FJeEJGLEVBQUlJLFdBQ04vRixTQUFTZ0csaUJBQWlCTCxFQUFJSSxZQUloQ0osRUFBSU0saUJBQWlCLGNBQWUsV0FDbENqRyxTQUFTZ0csaUJBQWlCTCxFQUFJSSxpQkFPbEMzQixVQUFVQyxjQUFjNEIsaUJBQWlCLG1CQUFvQixXQUN2RFIsSUFDSlMsT0FBT0MsU0FBU0MsU0FDaEJYLEdBQWEsTUFPakJ0Rix3QkFBd0JrRyxHQUN0QkEsRUFBT0osaUJBQWlCLGNBQWUsV0FDakIsYUFBaEJJLEVBQU9DLE9BQ1R0RyxTQUFTOEYsYUFBYU8sS0FRNUJsRyxvQkFBb0JrRyxHQUNsQkUsS0FBS0MsWUFBYyxJQUFJQyxNQUNURixLQUFLQyxZQUFZRSxPQUFPLHdCQUF5QixDQUM3REMsUUFBUyxDQUFDLFVBQVcsYUFHakJDLE9BQU9yRyxLQUFLLFNBQVNxRyxHQUNYLFdBQVZBLEdBQ0pQLEVBQU9RLFlBQVksQ0FBQ0MsT0FBUSIsImZpbGUiOiJkYmhlbHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb21tb24gZGF0YWJhc2UgaGVscGVyIGZ1bmN0aW9ucy5cclxuICovXHJcbmNsYXNzIERCSGVscGVyIHtcclxuXHJcbiAgLyoqXHJcbiAgICogRGF0YWJhc2UgVVJMLlxyXG4gICAqIENoYW5nZSB0aGlzIHRvIHJlc3RhdXJhbnRzLmpzb24gZmlsZSBsb2NhdGlvbiBvbiB5b3VyIHNlcnZlci5cclxuICAgKi9cclxuICBzdGF0aWMgZ2V0IERBVEFCQVNFX1VSTCgpIHtcclxuICAgIGNvbnN0IHBvcnQgPSAxMzM3IC8vIENoYW5nZSB0aGlzIHRvIHlvdXIgc2VydmVyIHBvcnRcclxuICAgIHJldHVybiBgaHR0cDovL2xvY2FsaG9zdDoke3BvcnR9YDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXQgZXJyb3JNc2coKSB7XHJcbiAgICByZXR1cm4gJ09oIG5vISBDb3VsZCBub3QgcmVmcmVzaCBjb250ZW50IDooJztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIGFsbCByZXF1ZXN0ZWQgZGF0YS5cclxuICAgKiBVc2luZyBGZXRjaCBBUEkuXHJcbiAgICogQHBhcmFtIGRhdGFOYW1lIG5hbWUgb2YgdGhlIHJlcXVlc3RlZCBkYXRhXHJcbiAgICogQHBhcmFtIGNhbGxiYWNrIHRoZSBjYWxsYmFjayBmdW5jdGlvblxyXG4gICAqL1xyXG4gIHN0YXRpYyBmZXRjaERhdGEoZGF0YU5hbWUsIGNhbGxiYWNrKSB7XHJcbiAgICBEQkhlbHBlci5vcGVuRGF0YWJhc2UoKS50aGVuKGZ1bmN0aW9uKGRiKSB7XHJcbiAgICAgIGlmICghZGIpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBkYkRhdGEgPSBkYi50cmFuc2FjdGlvbihkYXRhTmFtZSkub2JqZWN0U3RvcmUoZGF0YU5hbWUpO1xyXG5cclxuICAgICAgZGJEYXRhLmdldEFsbCgpLnRoZW4oZnVuY3Rpb24oY29udGVudCkge1xyXG4gICAgICAgIGZldGNoKGAke0RCSGVscGVyLkRBVEFCQVNFX1VSTH0vJHtkYXRhTmFtZX0vYClcclxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgIC8vIHVwZGF0ZSBJREIgb25seSBpZiBjb250ZW50IGlzIGRpZmZlcmVudFxyXG4gICAgICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KGRhdGEpICE9PSBKU09OLnN0cmluZ2lmeShjb250ZW50KSkge1xyXG4gICAgICAgICAgICBEQkhlbHBlci5fdXBkYXRlREIoZGF0YU5hbWUsIGRhdGEpO1xyXG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBkYXRhKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGNvbnRlbnQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4gY2FsbGJhY2soREJIZWxwZXIuZXJyb3JNc2csIGNvbnRlbnQpKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIGEgZGF0YSBieSBpdHMgSUQuXHJcbiAgICovXHJcbiAgc3RhdGljIGZldGNoRGF0YUJ5SWQoZGF0YU5hbWUsIGlkLCBjYWxsYmFjaykge1xyXG4gICAgREJIZWxwZXIub3BlbkRhdGFiYXNlKCkudGhlbihmdW5jdGlvbihkYikge1xyXG4gICAgICBpZiAoIWRiKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgZGJEYXRhID0gZGIudHJhbnNhY3Rpb24oZGF0YU5hbWUpLm9iamVjdFN0b3JlKGRhdGFOYW1lKTtcclxuICAgICAgY29uc3QgZGF0YUlEID0gcGFyc2VJbnQoaWQpO1xyXG5cclxuICAgICAgZGJEYXRhLmdldChkYXRhSUQpLnRoZW4oZnVuY3Rpb24oY29udGVudCkge1xyXG4gICAgICAgIGZldGNoKGAke0RCSGVscGVyLkRBVEFCQVNFX1VSTH0vJHtkYXRhTmFtZX0vJHtkYXRhSUR9YClcclxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShkYXRhKSAhPT0gSlNPTi5zdHJpbmdpZnkoY29udGVudCkpIHtcclxuICAgICAgICAgICAgREJIZWxwZXIuX3VwZGF0ZURCKGRhdGFOYW1lLCBkYXRhKTtcclxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBjb250ZW50KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4gY2FsbGJhY2soREJIZWxwZXIuZXJyb3JNc2csIGNvbnRlbnQpKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIGFsbCByZXF1ZXN0ZWQgZGF0YS5cclxuICAgKiBVc2luZyBGZXRjaCBBUEkuXHJcbiAgICogQHBhcmFtIGlkIHJlc3RhdXJhbnQgaWRcclxuICAgKiBAcGFyYW0gY2FsbGJhY2sgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uXHJcbiAgICovXHJcbiAgc3RhdGljIGZldGNoUmV2aWV3c0J5UmVzdGF1cmFudElkKGlkLCBjYWxsYmFjaykge1xyXG4gICAgREJIZWxwZXIub3BlbkRhdGFiYXNlKCkudGhlbihmdW5jdGlvbihkYikge1xyXG4gICAgICBpZiAoIWRiKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgZGJEYXRhID0gZGIudHJhbnNhY3Rpb24oJ3Jldmlld3MnKS5vYmplY3RTdG9yZSgncmV2aWV3cycpO1xyXG4gICAgICBjb25zdCByZXN0YXVyYW50SUQgPSBwYXJzZUludChpZCk7XHJcbiAgICAgIGNvbnN0IHJlc3RhdXJhbnRSZXZpZXdzID0gZGJEYXRhLmluZGV4KCdieS1yZXN0YXVyYW50Jyk7XHJcblxyXG4gICAgICByZXN0YXVyYW50UmV2aWV3cy5nZXRBbGwocmVzdGF1cmFudElEKS50aGVuKGZ1bmN0aW9uKGNvbnRlbnQpIHtcclxuICAgICAgICBmZXRjaChgJHtEQkhlbHBlci5EQVRBQkFTRV9VUkx9L3Jldmlld3MvP3Jlc3RhdXJhbnRfaWQ9JHtyZXN0YXVyYW50SUR9YClcclxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShkYXRhKSAhPT0gSlNPTi5zdHJpbmdpZnkoY29udGVudCkpIHtcclxuICAgICAgICAgICAgREJIZWxwZXIuX3VwZGF0ZURCKCdyZXZpZXdzJywgZGF0YSk7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgY29udGVudCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiBjYWxsYmFjayhEQkhlbHBlci5lcnJvck1zZywgY29udGVudCkpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggcmVzdGF1cmFudHMgYnkgYSBjdWlzaW5lIHR5cGUgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICovXHJcbiAgc3RhdGljIGZldGNoUmVzdGF1cmFudEJ5Q3Vpc2luZShjdWlzaW5lLCBjYWxsYmFjaykge1xyXG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzICB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZ1xyXG4gICAgREJIZWxwZXIuZmV0Y2hEYXRhKCdyZXN0YXVyYW50cycsIChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgaWYgKGVycm9yICYmIHJlc3RhdXJhbnRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBGaWx0ZXIgcmVzdGF1cmFudHMgdG8gaGF2ZSBvbmx5IGdpdmVuIGN1aXNpbmUgdHlwZVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSByZXN0YXVyYW50cy5maWx0ZXIociA9PiByLmN1aXNpbmVfdHlwZSA9PSBjdWlzaW5lKTtcclxuICAgICAgICBjYWxsYmFjayhlcnJvciwgcmVzdWx0cyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggcmVzdGF1cmFudHMgYnkgYSBuZWlnaGJvcmhvb2Qgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICovXHJcbiAgc3RhdGljIGZldGNoUmVzdGF1cmFudEJ5TmVpZ2hib3Job29kKG5laWdoYm9yaG9vZCwgY2FsbGJhY2spIHtcclxuICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xyXG4gICAgREJIZWxwZXIuZmV0Y2hEYXRhKCdyZXN0YXVyYW50cycsIChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgaWYgKGVycm9yICYmIHJlc3RhdXJhbnRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBGaWx0ZXIgcmVzdGF1cmFudHMgdG8gaGF2ZSBvbmx5IGdpdmVuIG5laWdoYm9yaG9vZFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSByZXN0YXVyYW50cy5maWx0ZXIociA9PiByLm5laWdoYm9yaG9vZCA9PSBuZWlnaGJvcmhvb2QpO1xyXG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCByZXN1bHRzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIGN1aXNpbmUgYW5kIGEgbmVpZ2hib3Job29kIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBmZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmVBbmROZWlnaGJvcmhvb2QoY3Vpc2luZSwgbmVpZ2hib3Job29kLCBjYWxsYmFjaykge1xyXG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXHJcbiAgICBEQkhlbHBlci5mZXRjaERhdGEoJ3Jlc3RhdXJhbnRzJywgKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xyXG4gICAgICBpZiAoZXJyb3IgJiYgcmVzdGF1cmFudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxldCByZXN1bHRzID0gcmVzdGF1cmFudHNcclxuICAgICAgICBpZiAoY3Vpc2luZSAhPSAnYWxsJykgeyAvLyBmaWx0ZXIgYnkgY3Vpc2luZVxyXG4gICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuZmlsdGVyKHIgPT4gci5jdWlzaW5lX3R5cGUgPT0gY3Vpc2luZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChuZWlnaGJvcmhvb2QgIT0gJ2FsbCcpIHsgLy8gZmlsdGVyIGJ5IG5laWdoYm9yaG9vZFxyXG4gICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuZmlsdGVyKHIgPT4gci5uZWlnaGJvcmhvb2QgPT0gbmVpZ2hib3Job29kKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIHJlc3VsdHMpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIGFsbCBuZWlnaGJvcmhvb2RzIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBmZXRjaE5laWdoYm9yaG9vZHMoY2FsbGJhY2spIHtcclxuICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xyXG4gICAgREJIZWxwZXIuZmV0Y2hEYXRhKCdyZXN0YXVyYW50cycsIChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgaWYgKGVycm9yICYmIHJlc3RhdXJhbnRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBHZXQgYWxsIG5laWdoYm9yaG9vZHMgZnJvbSBhbGwgcmVzdGF1cmFudHNcclxuICAgICAgICBjb25zdCBuZWlnaGJvcmhvb2RzID0gcmVzdGF1cmFudHMubWFwKCh2LCBpKSA9PiByZXN0YXVyYW50c1tpXS5uZWlnaGJvcmhvb2QpXHJcbiAgICAgICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZXMgZnJvbSBuZWlnaGJvcmhvb2RzXHJcbiAgICAgICAgY29uc3QgdW5pcXVlTmVpZ2hib3Job29kcyA9IG5laWdoYm9yaG9vZHMuZmlsdGVyKCh2LCBpKSA9PiBuZWlnaGJvcmhvb2RzLmluZGV4T2YodikgPT0gaSlcclxuICAgICAgICBjYWxsYmFjayhlcnJvciwgdW5pcXVlTmVpZ2hib3Job29kcyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggYWxsIGN1aXNpbmVzIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBmZXRjaEN1aXNpbmVzKGNhbGxiYWNrKSB7XHJcbiAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHNcclxuICAgIERCSGVscGVyLmZldGNoRGF0YSgncmVzdGF1cmFudHMnLCAoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgICAgIGlmIChlcnJvciAmJiByZXN0YXVyYW50cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gR2V0IGFsbCBjdWlzaW5lcyBmcm9tIGFsbCByZXN0YXVyYW50c1xyXG4gICAgICAgIGNvbnN0IGN1aXNpbmVzID0gcmVzdGF1cmFudHMubWFwKCh2LCBpKSA9PiByZXN0YXVyYW50c1tpXS5jdWlzaW5lX3R5cGUpXHJcbiAgICAgICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZXMgZnJvbSBjdWlzaW5lc1xyXG4gICAgICAgIGNvbnN0IHVuaXF1ZUN1aXNpbmVzID0gY3Vpc2luZXMuZmlsdGVyKCh2LCBpKSA9PiBjdWlzaW5lcy5pbmRleE9mKHYpID09IGkpXHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIHVuaXF1ZUN1aXNpbmVzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXN0YXVyYW50IHBhZ2UgVVJMLlxyXG4gICAqL1xyXG4gIHN0YXRpYyB1cmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpIHtcclxuICAgIHJldHVybiAoYC4vcmVzdGF1cmFudC5odG1sP2lkPSR7cmVzdGF1cmFudC5pZH1gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc3RhdXJhbnQgaW1hZ2UgZGVzY3JpcHRpb24uXHJcbiAgICovXHJcbiAgc3RhdGljIGdldFBob3RvRGVzY3JpcHRpb24ocmVzdGF1cmFudCkge1xyXG4gICAgcmV0dXJuIChgUGhvdG8gb2YgJHtyZXN0YXVyYW50Lm5hbWV9IGluICR7cmVzdGF1cmFudC5uZWlnaGJvcmhvb2R9YCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXN0YXVyYW50IGltYWdlIFVSTC5cclxuICAgKi9cclxuICBzdGF0aWMgaW1hZ2VVcmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQsIGxvdyA9IGZhbHNlKSB7XHJcbiAgICBpZiAocmVzdGF1cmFudCAmJiByZXN0YXVyYW50LnBob3RvZ3JhcGgpIHtcclxuICAgICAgcmV0dXJuIChsb3cpID8gKGBpbWdzLyR7cmVzdGF1cmFudC5waG90b2dyYXBofS1sb3cuanBnYCkgOlxyXG4gICAgICAgICAgICAgICAgICAgIChgaW1ncy8ke3Jlc3RhdXJhbnQucGhvdG9ncmFwaH0uanBnYCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gKGBpbWdzL25vLXBpY3R1cmVzLnN2Z2ApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzdGF1cmFudCBpbWFnZSBzcmNzZXQgVVJMcy5cclxuICAgKi9cclxuICBzdGF0aWMgaW1hZ2VTUkNTZXRVcmxzRm9yUmVzdGF1cmFudChyZXN0YXVyYW50LCBvcHRzKSB7XHJcbiAgICBsZXQgaW1hZ2VzID0gW107XHJcblxyXG4gICAgaWYgKHJlc3RhdXJhbnQgJiYgcmVzdGF1cmFudC5waG90b2dyYXBoKSB7XHJcbiAgICAgIG9wdHMuZm9yRWFjaChwcm9wID0+IHtcclxuICAgICAgICBpbWFnZXMucHVzaChgaW1ncy8ke3Jlc3RhdXJhbnQucGhvdG9ncmFwaH0tJHtwcm9wfS5qcGcgJHtwcm9wfWApO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW1hZ2VzLmpvaW4oJywgJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNYXAgbWFya2VyIGZvciBhIHJlc3RhdXJhbnQuXHJcbiAgICovXHJcbiAgc3RhdGljIG1hcE1hcmtlckZvclJlc3RhdXJhbnQocmVzdGF1cmFudCwgbWFwKSB7XHJcbiAgICBjb25zdCBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcclxuICAgICAgcG9zaXRpb246IHJlc3RhdXJhbnQubGF0bG5nLFxyXG4gICAgICB0aXRsZTogcmVzdGF1cmFudC5uYW1lLFxyXG4gICAgICB1cmw6IERCSGVscGVyLnVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCksXHJcbiAgICAgIG1hcDogbWFwLFxyXG4gICAgICBhbmltYXRpb246IGdvb2dsZS5tYXBzLkFuaW1hdGlvbi5EUk9QfVxyXG4gICAgKTtcclxuICAgIHJldHVybiBtYXJrZXI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgZGF0YWJhc2UgZm9yIHJlc3RhdXJhbnRzLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBvcGVuRGF0YWJhc2UoKSB7XHJcbiAgICAvLyBJZiB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgc2VydmljZSB3b3JrZXIsXHJcbiAgICAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGhhdmluZyBhIGRhdGFiYXNlXHJcbiAgICBpZiAoIW5hdmlnYXRvci5zZXJ2aWNlV29ya2VyKSB7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaWRiLm9wZW4oJ3Jlc3RhdXJuYXRzRGF0YScsIDEsIGZ1bmN0aW9uKHVwZ3JhZGVEYikge1xyXG4gICAgICBjb25zdCBzdG9yZXMgPSBbJ3Jlc3RhdXJhbnRzJywgJ3Jldmlld3MnLCAnbmV3J107XHJcblxyXG4gICAgICBzdG9yZXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICBsZXQgc3RvcmUgPSB1cGdyYWRlRGIuY3JlYXRlT2JqZWN0U3RvcmUoaXRlbSwge1xyXG4gICAgICAgICAgYXV0b0luY3JlbWVudCA6IHRydWUsIGtleVBhdGg6ICdpZCdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc3RvcmUuY3JlYXRlSW5kZXgoJ2J5LWRhdGUnLCAnY3JlYXRlZEF0Jyk7XHJcblxyXG4gICAgICAgIGlmIChpdGVtID09PSAncmV2aWV3cycpIHtcclxuICAgICAgICAgIHN0b3JlLmNyZWF0ZUluZGV4KCdieS1yZXN0YXVyYW50JywgJ3Jlc3RhdXJhbnRfaWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCBuZXcgcmVzdGF1cmFudHMgZnJvbSBuZXR3b3JrLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBfdXBkYXRlREIoZGF0YU5hbWUsIGRhdGEpIHtcclxuICAgIERCSGVscGVyLm9wZW5EYXRhYmFzZSgpLnRoZW4oZnVuY3Rpb24oZGIpIHtcclxuICAgICAgaWYgKCFkYikgcmV0dXJuO1xyXG5cclxuICAgICAgdmFyIHR4ID0gZGIudHJhbnNhY3Rpb24oZGF0YU5hbWUsICdyZWFkd3JpdGUnKTtcclxuICAgICAgdmFyIHN0b3JlID0gdHgub2JqZWN0U3RvcmUoZGF0YU5hbWUpO1xyXG5cclxuICAgICAgbGV0IG5ld0RhdGEgPSBbXS5jb25jYXQoZGF0YSk7XHJcblxyXG4gICAgICBuZXdEYXRhLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgc3RvcmUucHV0KGl0ZW0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIGxpbWl0IHN0b3JlIHRvIDMwIGl0ZW1zXHJcbiAgICAgIHN0b3JlLmluZGV4KCdieS1kYXRlJykub3BlbkN1cnNvcihudWxsLCBcInByZXZcIikudGhlbihmdW5jdGlvbihjdXJzb3IpIHtcclxuICAgICAgICByZXR1cm4gY3Vyc29yLmFkdmFuY2UoMzApO1xyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIGRlbGV0ZVJlc3QoY3Vyc29yKSB7XHJcbiAgICAgICAgaWYgKCFjdXJzb3IpIHJldHVybjtcclxuICAgICAgICBjdXJzb3IuZGVsZXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIGN1cnNvci5jb250aW51ZSgpLnRoZW4oZGVsZXRlUmVzdCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWdpc3RlciBzZXJ2aWNlIHdvcmtlclxyXG4gICAqL1xyXG4gICBzdGF0aWMgcmVnaXN0ZXJTZXJ2aWNlV29ya2VyKCkge1xyXG4gICAgIGlmICghbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIpIHtcclxuICAgICAgIHJldHVybjtcclxuICAgICB9XHJcblxyXG4gICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKCdzdy5qcycpLnRoZW4oZnVuY3Rpb24ocmVnKSB7XHJcbiAgICAgICBpZiAoIW5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIpIHtcclxuICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgfVxyXG5cclxuICAgICAgIGlmIChyZWcud2FpdGluZykge1xyXG4gICAgICAgICBEQkhlbHBlci5fdXBkYXRlUmVhZHkocmVnLndhaXRpbmcpO1xyXG4gICAgICAgICByZXR1cm47XHJcbiAgICAgICB9XHJcblxyXG4gICAgICAgaWYgKHJlZy5pbnN0YWxsaW5nKSB7XHJcbiAgICAgICAgIERCSGVscGVyLl90cmFja0luc3RhbGxpbmcocmVnLmluc3RhbGxpbmcpO1xyXG4gICAgICAgICByZXR1cm47XHJcbiAgICAgICB9XHJcblxyXG4gICAgICAgcmVnLmFkZEV2ZW50TGlzdGVuZXIoJ3VwZGF0ZWZvdW5kJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgIERCSGVscGVyLl90cmFja0luc3RhbGxpbmcocmVnLmluc3RhbGxpbmcpO1xyXG4gICAgICAgfSk7XHJcbiAgICAgfSk7XHJcblxyXG4gICAgIC8vIEVuc3VyZSByZWZyZXNoIGlzIG9ubHkgY2FsbGVkIG9uY2UuXHJcbiAgICAgLy8gVGhpcyB3b3JrcyBhcm91bmQgYSBidWcgaW4gXCJmb3JjZSB1cGRhdGUgb24gcmVsb2FkXCIuXHJcbiAgICAgdmFyIHJlZnJlc2hpbmc7XHJcbiAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuYWRkRXZlbnRMaXN0ZW5lcignY29udHJvbGxlcmNoYW5nZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgaWYgKHJlZnJlc2hpbmcpIHJldHVybjtcclxuICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgIHJlZnJlc2hpbmcgPSB0cnVlO1xyXG4gICAgIH0pO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogc2VydmljZSB3b3JrZXJcclxuICAgICovXHJcbiAgIHN0YXRpYyBfdHJhY2tJbnN0YWxsaW5nKHdvcmtlcikge1xyXG4gICAgIHdvcmtlci5hZGRFdmVudExpc3RlbmVyKCdzdGF0ZWNoYW5nZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgaWYgKHdvcmtlci5zdGF0ZSA9PSAnaW5zdGFsbGVkJykge1xyXG4gICAgICAgICBEQkhlbHBlci5fdXBkYXRlUmVhZHkod29ya2VyKTtcclxuICAgICAgIH1cclxuICAgICB9KTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIHNlcnZpY2Ugd29ya2VyXHJcbiAgICAqL1xyXG4gICBzdGF0aWMgX3VwZGF0ZVJlYWR5KHdvcmtlcikge1xyXG4gICAgIHRoaXMuX3RvYXN0c1ZpZXcgPSBuZXcgVG9hc3QoKTtcclxuICAgICBjb25zdCB0b2FzdCA9IHRoaXMuX3RvYXN0c1ZpZXcuY3JlYXRlKFwiTmV3IHZlcnNpb24gYXZhaWxhYmxlXCIsIHtcclxuICAgICAgIGJ1dHRvbnM6IFsncmVmcmVzaCcsICdkaXNtaXNzJ11cclxuICAgICB9KTtcclxuXHJcbiAgICAgdG9hc3QuYW5zd2VyLnRoZW4oZnVuY3Rpb24oYW5zd2VyKSB7XHJcbiAgICAgICBpZiAoYW5zd2VyICE9ICdyZWZyZXNoJykgcmV0dXJuO1xyXG4gICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHthY3Rpb246ICdza2lwV2FpdGluZyd9KTtcclxuICAgICB9KTtcclxuICAgfVxyXG5cclxufVxyXG4iXX0=
