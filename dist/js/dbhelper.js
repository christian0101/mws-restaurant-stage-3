class DBHelper{static get DATABASE_URL(){return"http://localhost:1337"}static get offErrorMsg(){return"Network requests have failed, this is expected if offline"}static getServerData(e){return fetch(e).then(e=>{if(!e.ok)throw Error(e.statusText);return e.json()})}static fetchData(e,t,r){const a=`${DBHelper.DATABASE_URL}/${e}/`;DBHelper.getLocalData(t,e).then(t=>{t.length&&r(null,null,t),DBHelper.getServerData(a).then(t=>{DBHelper._updateDB(e,t),r(null,null,t)}).catch(a=>{t.length?r(null,DBHelper.offErrorMsg,t):r(`No ${e} found :(`,null,null)})})}static fetchDataById(e,t,r,a){const n=`${DBHelper.DATABASE_URL}/${e}/${t}`;DBHelper.getLocalData(r,e,t,!1).then(t=>{t&&a(null,null,t),DBHelper.getServerData(n).then(t=>{DBHelper._updateDB(e,t),a(null,null,t)}).catch(r=>{t?a(null,DBHelper.offErrorMsg,t):a(`No ${e} found :(`,null,null)})})}static fetchReviewsByRestaurantId(e,t,r){const a=`${DBHelper.DATABASE_URL}/reviews/?restaurant_id=${e}`;DBHelper.getLocalData(t,"reviews",e,!0,"by-restaurant").then(e=>{e.length&&(e.reverse(),r(null,null,e)),DBHelper.getServerData(a).then(e=>{DBHelper._updateDB("reviews",e),e.reverse(),r(null,null,e)}).catch(t=>{e.length?r(null,DBHelper.offErrorMsg,e):r("No reviews found :(",null,null)})})}static fetchRestaurantByCuisine(e,t,r){DBHelper.fetchData("restaurants",(t,a,n)=>{if(t)r(t,null);else{const t=n.filter(t=>t.cuisine_type==e);r(a,t)}})}static fetchRestaurantByNeighborhood(e,t,r){DBHelper.fetchData("restaurants",t,(t,a,n)=>{if(t)r(t,null);else{const t=n.filter(t=>t.neighborhood==e);r(a,t)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r,a){DBHelper.fetchData("restaurants",r,(r,n,i)=>{if(r)a(r,null);else{let r=i;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),a(n,r)}})}static fetchNeighborhoods(e,t){DBHelper.fetchData("restaurants",e,(e,r,a)=>{if(e)t(e,null);else{const e=a.map((e,t)=>a[t].neighborhood),n=e.filter((t,r)=>e.indexOf(t)==r);t(r,n)}})}static fetchCuisines(e,t){DBHelper.fetchData("restaurants",e,(e,r,a)=>{if(e)t(e,null);else{const e=a.map((e,t)=>a[t].cuisine_type),n=e.filter((t,r)=>e.indexOf(t)==r);t(r,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static getPhotoDescription(e){return`Photo of ${e.name} in ${e.neighborhood}`}static imageUrlForRestaurant(e,t=!1){return e&&e.photograph?t?`imgs/${e.photograph}-low.jpg`:`imgs/${e.photograph}.jpg`:"imgs/no-pictures.svg"}static imageSRCSetUrlsForRestaurant(e,t){let r=[];return e&&e.photograph&&t.forEach(t=>{r.push(`imgs/${e.photograph}-${t}.jpg ${t}`)}),r.join(", ")}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static openDatabase(){return navigator.serviceWorker?"indexedDB"in window?idb.open("restaurantsData",1,function(e){["restaurants","reviews","newR","newIsFavourite"].forEach(t=>{if(!e.objectStoreNames.contains(t)){let r=e.createObjectStore(t,{autoIncrement:!0,keyPath:"id"});r.createIndex("by-date","createdAt"),"reviews"!==t&&"newIsFavourite"!==t||r.createIndex("by-restaurant","restaurant_id")}})}):null:Promise.resolve()}static _updateDB(e,t,r){return DBHelper.openDatabase().then(function(r){if(!r)return;var a=r.transaction(e,"readwrite").objectStore(e);[].concat(t).forEach(e=>{a.put(e)}),a.index("by-date").openCursor(null,"prev").then(function(e){return e.advance(30)}).then(function e(t){if(t)return t.delete(),t.continue().then(e)})})}static getLocalData(e,t,r,a=!0,n){return"indexedDB"in window?e.then(e=>{isNaN(r)||(r=parseInt(r));const i=e.transaction(t,"readonly").objectStore(t),l=n?i.index(n):i;return a?r?l.getAll(r):l.getAll():l.get(r)}):null}static registerServiceWorker(){var e;navigator.serviceWorker&&(navigator.serviceWorker.register("sw.js").then(function(e){navigator.serviceWorker.controller&&(e.waiting?DBHelper._updateReady(e.waiting):e.installing?DBHelper._trackInstalling(e.installing):e.addEventListener("updatefound",function(){DBHelper._trackInstalling(e.installing)}))}),navigator.serviceWorker.addEventListener("controllerchange",function(){e||(window.location.reload(),e=!0)}))}static _trackInstalling(e){e.addEventListener("statechange",function(){"installed"==e.state&&DBHelper._updateReady(e)})}static _updateReady(e){this._toastsView=new Toast,this._toastsView.create("New version available",null,["refresh","dismiss"]).answer.then(function(t){"refresh"==t&&e.postMessage({action:"skipWaiting"})})}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
